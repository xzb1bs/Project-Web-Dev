import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { BoardService } from '../../services/board.service';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { TaskService } from '../../services/task.service';
import { Observable } from 'rxjs';
import { Location } from '@angular/common';
import { InboardService } from '../../services/inboard.service';
import { Column,Task} from '../../models/column.model';
import { Board } from '../../services/board.service';


@Component({
  selector: 'app-board',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './board.component.html',
  styleUrl: './board.component.css'
})
export class BoardComponent implements OnInit {
  isUserLoggedIn$: Observable<boolean>; 
  boardTitle: string = '';
  tasks: Task[] = [];  
  boardId:number =0;
  isLoading: boolean = true;
  currentBoard!: Board;

  columns: Column[] = [];

  constructor(
    private taskService:TaskService,
    private inboardService: InboardService,
    private route: ActivatedRoute,
    private boardService: BoardService,
    private authService: AuthService,
    private router: Router,
    private location: Location
  ) {
    this.isUserLoggedIn$ = this.authService.isLoggedIn$;
  }

  ngOnInit(): void {
    this.boardId = Number(this.route.snapshot.paramMap.get('id'));

    this.boardService.getBoardById(this.boardId).subscribe({
      next: (board) => {
        this.currentBoard = board;
        this.boardTitle = board.title;


        this.loadColumns();
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–∫–∏:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É');
      }
    });
  }

  // üü¢ –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (–∑–∞–≥–ª—É—à–∫–∞ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
 

  loadColumns(): void {
    this.inboardService.getColumns(this.boardId).subscribe({
      next: (columns) => {
        // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –∑–∞–¥–∞—á (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        this.columns = columns.map(col => ({ ...col, tasks: [] }));

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        this.columns.forEach(col => this.loadTasksForColumn(col));
      },
      error: () => {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–æ–Ω–æ–∫');
      }
    });
  }

  deleteTask(taskId: number): void {
    this.taskService.deleteTask(taskId).subscribe(
      () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        this.tasks = this.tasks.filter(task => task.id !== taskId);
      },
      (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      }
    );
  }

  loadTasksForColumn(column: Column): void {
    if (!column.id) return;
  
    this.inboardService.getTasksForColumn(column.id).subscribe({
      next: (tasks) => column.tasks = tasks,
      error: () => {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏: ${column.title}`);
      }
    });}

  
  back(): void {
    this.location.back();
  }
  
  deleteBoard(): void {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –¥–æ—Å–∫—É?')) {
      this.boardService.deleteBoard(this.boardId).subscribe({
        next: () => {
          alert('–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
          this.location.back();
        },
        error: (err) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏:', err);
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É');
        }
      });
    }
  }

  addColumn() {
  const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏:');
  if (title) {
    this.inboardService.addColumn(this.boardId, title).subscribe({
      next: (newColumn) => this.columns.push({ ...newColumn, tasks: [] }),
      error: () => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏')
    });
  }
  }
  addTask(column: Column) {
    const taskTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:');
    if (taskTitle && column.id !== undefined) {  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
      const newTask: Task = {
        title: taskTitle,
        column: column.id  // –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ number
      };
  
      this.inboardService.addTaskToBoard(this.boardId, newTask).subscribe({
        next: (createdTask) => column.tasks.push(createdTask),
        error: () => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
      });
    }
  }
}
